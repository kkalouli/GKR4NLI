plugins {
    id 'war' 
    id 'java'
    id 'eclipse'
    //id 'org.gretty' version '2.2.0' 
}


    repositories {
        jcenter()
        maven {
        url "https://mvnrepository.com/artifact/"
   		}
    }

	dependencies {
		
	// compile all jars that are not found in repositories 
	compile fileTree(dir: '/Users/kkalouli/Documents/libraries/GKR_libs/', include: ['*.jar'])	
   	
    // https://mvnrepository.com/artifact/com.github.ontologyportal/sigma-nlp
	//compile group: 'com.github.ontologyportal', name: 'sigma-nlp', version: '1.1'
	// we are only importing the sigma-component becase sigma-nlp contains lucene (through the stanford dep) which creates a problem with the snowball stemmer
	// https://mvnrepository.com/artifact/com.github.ontologyportal/sigma-component
	compile group: 'com.github.ontologyportal', name: 'sigma-component', version: '2.12'
	
	// https://mvnrepository.com/artifact/org.mongodb/mongo-java-driver
	compile group: 'org.mongodb', name: 'mongo-java-driver', version: '3.12.0'
	
	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
	

		// bert wrapper for java
	implementation 'com.robrua.nlp:easy-bert:1.0.3'
	// bert pretrained model
	implementation 'com.robrua.nlp.models:easy-bert-uncased-L-12-H-768-A-12:1.0.0'
	
	
	
	// https://mvnrepository.com/artifact/org.jgrapht/jgrapht-ext
	//runtime group: 'org.jgrapht', name: 'jgrapht-ext', version: '1.0.1'
		
	// https://mvnrepository.com/artifact/org.springframework/spring-core
	//runtime group: 'org.springframework', name: 'spring-core', version: '4.3.7.RELEASE'
	
	
	compile project(':sem.graph')
	compile project(':sem.mapper')

	
	providedCompile 'javax.servlet:javax.servlet-api:3.1.0' 
    testCompile 'junit:junit:4.12'
    
  	
	}
	
	
	task fatJar(type: Jar) {
    	manifest {
        	attributes 'Main-Class':'gnli.InferenceComputer'
    	}
   		baseName = project.name + '-all'
     	from { 
    		//configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    		configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    		}
    
    	with jar
	}
	
	
	task fatJarGKR(type: Jar) {
    	manifest {
        	attributes 'Main-Class':'sem.mapper.DepGraphToSemanticGraph'
    	}
   		baseName = project.name + '-only_gkr'
     	from { 
    		//configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    		configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    		}
    
    	with jar
	}
	
		
	//gretty{
	//httpPort = 8088
	//servletContainer = 'jetty9.4'
	//}
	







